현재 적용시킬 수 있는 방안으로 Tomcat 세션 클러스터링과, Redis가 있습니다.

[Tomcat Session Clustering]
여러 서버가 세션을 하나의 클러스터로 묶어서 관리하는 방법으로, 
특정 서버가 장애가 나도 세션이 소실되지 않습니다. 하지만 세션을 클러스터로 묶어서 관리하기 때문에 
새로운 서버를 띄울 때마다 클러스터링 설정을 새로 해줘야 하고 기존 서버에 수정을 해야 합니다. 
또한 was 마다 클러스터링 설정 방법이 다르기 때문에 was가 바뀐다면 매번 학습해야 합니다.

이 경우, 다음과 같은 이슈가 있습니다.
* scale out 시 서버 간 세션의 불일치가 발생할 수 있다.
* 모든 데이터를 각각의 Tomcat 노드에 전달해야 하고 배포하는 노드가 아닐 경우에도 세션 복사를 진행하기 때문에 
  불필요한 메모리를 차지하게 되면서 성능이 크게 떨어질 수 있습니다.
* 데이터 변경이 발생될때 마다 세션을 전파(복사)하는 작업이 일어나기 때문에 네트워크 요청 트래픽이 증가하게 됩니다.
* 세션 전파 작업 중 모든 서버에 세션이 전파되기까지의 시간차로 인한 세션 불일치 문제와 같은 예기치 못한 문제가 발생할 수 있다.

[Redis]
별도의 세션을 관리하는 저장소(In-memory DB)를 두는 방식으로,
서버에 세션 정보를 저장하는 것이 아닌 외부에 저장소를 만들고 이 서버에 모든 데이터를 저장하는 것으로 WAS 서버들이 외부의 저장소에서 데이터를 읽어오는 것 입니다.
이는, 디스크가 아닌 메모리에 데이터를 저장하는 방식으로 접근 속도가 빠르다는 장점이 있지만 안정성이 떨어지는 단점이 있습니다.
하지만, 세션정보와 같이 유실되어도 치명적이지 않은 임시성 데이터를 저장하여 빠르게 접근하기엔 최적이기에 현재 상황에 가장 적합하다고 생각합니다.
또한, 서버가 늘어나도 동일한 DB를 바라보기 때문에 scale-out 시 세션 간 불일치 문제를 해결 가능합니다.

이 경우, 다음과 같은 이슈가 있습니다.
* Redis라는 추가적인 메모리 저장소를 두는 방식으로 추가적인 비용의 발생.