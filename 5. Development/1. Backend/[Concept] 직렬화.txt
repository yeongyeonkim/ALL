[직렬화]
* 자바 시스템 내부에서 사용되는 Object 또는 Data를 
외부의 자바 시스템에서도 사용할 수 있도록 byte 형태로 데이터를 변환하는 기술.
* JVM의 메모리에 상주(Stack or Heap)되어 있는 객체 데이터를 byte 형태로 변환하는 기술

[직렬화의 사용]
JVM의 메모리에서만 상주되어있는 객체 데이터를 그대로 영속화(Persistence)가 필요할 때 사용
시스템이 종료되더라도 없어지지 않는 장점을 가지며 영속화된 데이터이기 때문에 네트워크로 전송도 가능
그리고 필요할 때 직렬화된 객체 데이터를 가져와서 역직렬화하여 객체를 바로 사용할 수 있게 된다.

> 데이터 타입이 자동으로 맞춰지기 때문에 관련 부분에 대한 신경을 크게 쓰지 않아도 된다.
* 서블릿 세션
 - 파일로 저장하거나 세션 클러스터링, DB에 저장하는 경우 Session 자체가 직렬화되어 전달된다.
* 캐시
 - Redis, Memcached 라이브러리 시스템을 사용한다.

[문제점]
어떤 Class를 직렬화한 후 해당 Class에 멤버 변수가 추가된 경우 해당 직렬화된 Data를
역직렬화 하면 java.io.InvalidClassException이 발생한다.
각 시스템에서 사용하고 있는 모델의 버전 차이가 발생했기 때문.
단순히 int -> long으로 변경해도 Exception이 발생하는 만큼 자바 직렬화는 상당히 엄격하다.

[역직렬화의 조건]
* 직렬화 대상이 된 객체의 클래스가 Class Path에 존재해야하며 import 되어 있어야 한다.
* 직렬화와 역직렬화를 진행하는 시스템이 서로 다를 수 있다는 것을 고려해야 한다.
* 직렬화 대상 객체는 동일한 SUID(serialVersionUID) 를 가지고 있어야 한다.
 'private static final long serialVersionUID = 1L'


참고
https://techblog.woowahan.com/2550/
https://www.baeldung.com/java-serialization




