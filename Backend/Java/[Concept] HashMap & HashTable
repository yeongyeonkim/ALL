[HashMap & HashTable]
<공통점>
1. Map 인터페이스를 상속받아 구현되어 데이터를 key와 value로 관리하는 자료구조
2. 탐색 시 List 인터페이스와 같은 자료구조 보다 높은 효율을 가짐 O(1)

<차이점>
1. 동기화(Synchronization) - 구현부에 Synchronized 키워드 유무 (e.g. public synchronized V get(Object key))
 - HashMap은 동기화를 지원하지 않고, HashTable은 동기화를 지원하므로 실행 환경에 따라 구분하여 사용
   (하지만, Vector -> ArrayList 상위 호환되는 클래스들을 쓰듯 HashTable -> HashMap을 사용하는 것이 좋다)
 - 동기화가 필요한 경우 Java 5부터 제공하는 ConcurrentHashmap을 사용하는 것이 좋다고 한다.(멀티스레드 환경: HashTable)
  -> HashMap을 동기화된 상태로 만들 수 있습니다. Map m = Collections.synchronizedMap(hashMap);
1-1. 추가로 속도적인 측면에서도, HashTable은 동기화 처리라는 비용때문에 더 느리다.
2. Null
 - HashMap은 하나의 Null key와 많은 Null value를 가질 수 있다.
 - HashTable은 key, value 모두 Null 가질 수 없다.
3. 반환값
 - HashMap은 Fail-Fast Iterator를 반환
 - HashTable은 Enumeration을 반환
 - Iterator, Enumberation은 컬렉션에 저장된 요소를 접근하는데 사용되는 인터페이스
 - Enumberation은 컬렉션 프레임 워크 이전에 사용되던 인터페이스로 Iterator 사용을 권장한다.
 - 다른 스레드에서 해당 자료 요소에 대한 변화(삽입, 삭제, 수정)를 발생시키면 
   ConcurrentmodificationException을 발생시켜 일관성을 보장하고, 이를 Fail-Fast Iterator라 한다.

[HashMap]
* Java Collection 프레임 워크에 속한 구현체 클래스
* Map 인터페이스를 상속하고 있기에 Map의 성질을 그대로 가지고 있다.
* Map은 key와 value로 구성된 Entry 객체를 저장하는 구조를 가진 자료구조
* 많은 양의 데이터를 검색하는 데 있어서 뛰어난 성능
* 다른 key 값에 대해 value나 hashCode가 동일한 경우 해시 충돌이 일어날 수 있다.
이 경우 hashCode를 담고있는 bucket이 연결리스트와 같은 구조로 다음 연결 리스트의 노드에 해당하는 key 값을 넣어주어 값을 저장한다.
